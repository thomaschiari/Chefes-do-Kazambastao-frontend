import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";

import { useMutation, useQuery } from "react-query";

import { postPedidos } from "~/api/mutations";

import React from "react";
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from "yup";

interface FormData {
  name: string;
  age: number;
}

const validationSchema = Yup.object({
  name: Yup.string().required("Name is required"),
  age: Yup.number()
    .min(0, "Age must be greater than or equal to 0")
    .required("Age is required"),
});

const Home: NextPage = () => {
  // const { data, isLoading, isError } = useQuery("pedidos", getPedidos);

  // const mutation = useMutation(postPedidos({nome: "marcelo", valor: 15}));
  const mutation = useMutation(postPedidos);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b ">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Zambas front
          </h1>
          <div className="mb-4 w-1/3 rounded bg-white px-8 pb-8 pt-6 shadow-md">
            <h1 className="mb-6 text-2xl">Form</h1>
            <Formik
              initialValues={{ name: "", age: "" }}
              validationSchema={validationSchema}
              onSubmit={(values, actions) => {
                mutation.mutate(values);
                actions.setSubmitting(false);
              }}
            >
              {({ isSubmitting }) => (
                <Form className="flex flex-col">
                  <div className="mb-4">
                    <label
                      htmlFor="name"
                      className="mb-2 block text-sm font-bold text-gray-700"
                    >
                      Name:
                    </label>
                    <Field
                      id="name"
                      name="name"
                      placeholder="Name"
                      className="focus:shadow-outline w-full appearance-none rounded border px-3 py-2 leading-tight text-gray-700 shadow focus:outline-none"
                    />
                    <ErrorMessage
                      name="name"
                      className="text-xs italic text-red-500"
                    />
                  </div>

                  <div className="mb-4">
                    <label
                      htmlFor="age"
                      className="mb-2 block text-sm font-bold text-gray-700"
                    >
                      Age:
                    </label>
                    <Field
                      id="age"
                      name="age"
                      placeholder="Age"
                      type="number"
                      className="focus:shadow-outline w-full appearance-none rounded border px-3 py-2 leading-tight text-gray-700 shadow focus:outline-none"
                    />
                    <ErrorMessage
                      name="age"
                      className="text-xs italic text-red-500"
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <button
                      type="submit"
                      disabled={isSubmitting}
                      className="focus:shadow-outline rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700 focus:outline-none"
                    >
                      Submit
                    </button>
                  </div>
                </Form>
              )}
            </Formik>
          </div>
          Regenerate
        </div>
      </main>
    </>
  );
};

export default Home;
